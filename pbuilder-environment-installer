#!/bin/bash
set -ex

### Basic initialization ###

environment="$1"
platform="$2"
step="$3"
eval "$environment"
export CCACHE_DIR="/srv/passenger_autobuilder/ccache/pbuilder/$platform"
mkdir -p "$CCACHE_DIR"
cd /tmp

# Disable apt-get fsync to make it faster.
apt_version=`apt-get --version | head -n 1 | awk '{print $2}'`
[[ "$apt_version" =~ ^([0-9]+)\.([0-9]+) ]]
if [[ ${BASH_REMATCH[1]} > 0 ]] || [[ ${BASH_REMATCH[1]} == 0 && ${BASH_REMATCH[2]} > 7 ]]; then
	echo force-unsafe-io > /etc/dpkg/dpkg.cfg.d/02apt-speedup
fi


### Functions ###

function is_step()
{
	local query="$1"
	[[ "$step" = "" || "$step" = "$query" ]]
}

function apt_get_install()
{
	apt-get install -y --no-install-recommends "$@"
}

function run_as_psg_autobuilder_chroot()
{
	sudo -u psg_autobuilder_chroot -H -E bash -lc \
		"export CCACHE_DIR=/srv/passenger_autobuilder/ccache/psg_autobuilder_chroot/$platform; $1"
}

function install_apache()
{
	local version="$1"
	local compat_version="$2"
	local with_included_apr="$3"
	local download_apr="$4"
	if [[ ! -e /usr/local/apache-$compat_version ]]; then
		pushd /tmp
		wget http://archive.apache.org/dist/httpd/httpd-$version.tar.bz2
		tar xjvf httpd-$version.tar.bz2
		rm httpd-$version.tar.bz2
		cd httpd-$version
		if [[ "$download_apr" = --download-apr ]]; then
			pushd srclib

			wget http://mirror.nl.webzilla.com/apache//apr/apr-1.5.0.tar.bz2
			tar xjvf apr-1.5.0.tar.bz2
			rm apr-1.5.0.tar.bz2
			mv apr-1.5.0 apr
			
			wget http://mirror.nl.webzilla.com/apache//apr/apr-util-1.5.3.tar.bz2
			tar xjvf apr-util-1.5.3.tar.bz2
			rm apr-util-1.5.3.tar.bz2
			mv apr-util-1.5.3 apr-util

			popd
		fi
		./configure --prefix=/usr/local/apache-$compat_version \
			--disable-ssl $with_included_apr
		make
		make install
		rm -f /usr/local/apache-$compat_version/lib/*.a
		strip --strip-debug /usr/local/apache-$compat_version/lib/*.so
		if ls /usr/local/apache-$compat_version/modules/*.so >/dev/null 2>/dev/null; then
			strip --strip-debug /usr/local/apache-$compat_version/modules/*.so
		fi
		cd ..
		rm -rf httpd-$version
		popd
	fi
}


### Start installation code ###

apt-get update
apt-get upgrade -y
if [[ ! -f /etc/apt/sources.list.d/phusion.nl-misc-lucid.list ]]; then
	apt_get_install python-software-properties lsb-release
	add-apt-repository ppa:phusion.nl/misc
	apt-get update
fi
distro_version=`lsb_release -r | awk '{print $2}'`

if is_step 1; then
	if ! grep -q psg_autobuilder_chroot /etc/group >/dev/null; then
		addgroup --gid 2457 psg_autobuilder_chroot
	fi
	if ! grep -q psg_autobuilder_chroot /etc/passwd; then
		adduser --uid 2457 --gid 2457 --disabled-password --gecos "Passenger Autobuilder Chroot" psg_autobuilder_chroot
	fi

	if [[ $distro_version = 10.04 ]]; then
		apt_get_install git-core
	else
		apt_get_install git
	fi
	apt_get_install build-essential libreadline6-dev zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev
	apt_get_install ccache wget curl less ssh sudo mizuho source-highlight libpcre3-dev libgeoip-dev
fi

if is_step 2; then
	# Install RVM, Ruby 1.8 and Ruby 1.9.2.
	usermod -a -G sudo psg_autobuilder_chroot
	[[ -e /usr/local/rvm ]] || (curl -L https://get.rvm.io | sudo -u psg_autobuilder_chroot -H -E bash -s stable)
	(
		export HOME=/home/psg_autobuilder_chroot
		/home/psg_autobuilder_chroot/.rvm/bin/rvm-exec requirements
		chown -R psg_autobuilder_chroot:psg_autobuilder_chroot /home/psg_autobuilder_chroot/.rvm
	)

	run_as_psg_autobuilder_chroot 'rvm install 1.8.7'
	run_as_psg_autobuilder_chroot 'rvm install 1.9.2'
fi

if is_step 3; then
	# Install Ruby 1.9.3, 2.0.0, 2.1.0 and Ruby tools.
	run_as_psg_autobuilder_chroot 'rvm install 1.9.3'
	run_as_psg_autobuilder_chroot 'rvm install 2.0.0'
	run_as_psg_autobuilder_chroot 'rvm install 2.1.3'
	run_as_psg_autobuilder_chroot 'rvm --default 2.1.3'
	run_as_psg_autobuilder_chroot 'rvm cleanup all'
	run_as_psg_autobuilder_chroot 'gem install drake bluecloth rspec --no-rdoc --no-ri'
fi

if is_step 4; then
	# Compile a static OpenSSL library.
	if [[ ! -e /usr/local/override/bin/openssl ]]; then
		wget http://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz
		tar xzvf openssl-$OPENSSL_VERSION.tar.gz
		rm openssl-$OPENSSL_VERSION.tar.gz
		cd openssl-$OPENSSL_VERSION
		./config --prefix=/usr/local/override --openssldir=/usr/local/override/openssl \
			threads zlib no-shared no-sse2
		make
		make install_sw
		strip --strip-all /usr/local/override/bin/openssl
		strip --strip-debug /usr/local/override/lib/libcrypto.a
		strip --strip-debug /usr/local/override/lib/libssl.a
		sed -i 's/-lcrypto/-lcrypto -ldl/' /usr/local/override/lib/pkgconfig/openssl.pc
		sed -i 's/-lcrypto/-lcrypto -ldl/' /usr/local/override/lib/pkgconfig/libssl.pc
		cd ..
		rm -rf openssl-$OPENSSL_VERSION
	fi

	# Compile a minimalist libcurl with almost no dependencies.
	if [[ ! -e /usr/local/override/bin/curl ]]; then
		wget http://curl.haxx.se/download/curl-$CURL_VERSION.tar.bz2
		tar xjvf curl-$CURL_VERSION.tar.bz2
		rm curl-$CURL_VERSION.tar.bz2
		cd curl-$CURL_VERSION
		./configure --prefix=/usr/local/override --disable-shared --disable-manual --disable-ldap --disable-ldaps \
			--disable-rtsp --disable-dict --disable-ftp --disable-ftps --disable-gopher --disable-imap \
			--disable-imaps --disable-pop3 --disable-pop3s --without-librtmp --disable-smtp --disable-smtps \
			--disable-telnet --disable-tftp --without-libmetalink --without-libidn --with-ssl
		make install-strip
		cd ..
		rm -rf curl-$CURL_VERSION
	fi
fi

if is_step 5; then
	# Compile Apaches.
	install_apache 2.0.65 2.0
	install_apache 2.2.25 2.2 --with-included-apr
	install_apache 2.4.6 2.4 --with-included-apr --download-apr
fi
