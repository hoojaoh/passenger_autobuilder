#!/usr/bin/env ruby
# encoding: utf-8
abort "This tool requires Ruby 1.9" if RUBY_VERSION <= '1.9'

require 'optparse'
require 'logger'
require 'fileutils'
require 'date'

ROOT = File.expand_path(File.dirname(__FILE__))

class Autobuild
  APACHE_VERSIONS = ['2.0', '2.2', '2.4']

  include FileUtils

  def start
    parse_options
    set_environment
    initialize_logger
    fetch_latest_code
    inspect_codebase
    if already_built?
      log "Already built commit #{@commit}. Exiting."
    else
      recompile
      copy_over_binaries
    end
  end

private
  def parse_options
    @options = {
      :repo_dir => File.expand_path("repo"),
      :output_dir => File.expand_path("output"),
      :work_tag => "today"
    }
    parser = OptionParser.new do |opts|
      nl = "\n#{' ' * 37}"
      opts.banner = "Usage: ./autobuild OPTIONS"
      opts.separator ""
      
      opts.separator "Options:"
      opts.on("--git-url URL", String, "The git URL") do |val|
        @options[:git_url] = val
      end
      opts.on("--repo-dir DIR", String, "The directory in which to store the repository") do |val|
        @options[:repo_dir] = File.expand_path(val)
      end
      opts.on("--output-dir DIR", String, "The directory in which to store binaries") do |val|
        @options[:output_dir] = File.expand_path(val)
      end
      opts.on("--work-tag NAME", String, "A tag to prevent duplicate builts") do |val|
        @options[:work_tag] = val
      end
      opts.on("--help", "-h", "Show help message") do
        @options[:help] = true
      end
    end

    begin
      parser.parse!
    rescue OptionParser::ParseError => e
      STDERR.puts e
      STDERR.puts
      STDERR.puts "Please see './autobuild --help' for valid options."
      exit 1
    end

    if @options[:help]
      puts parser
      exit 0
    end
    if !@options[:git_url]
      abort "Please specify --git-url."
    end
  end

  def set_environment
    STDOUT.sync = STDERR.sync = true
    set_env('USE_CCACHE', 1)
    set_env('GZIP', '--best')
    set_env('VERBOSE', 1)
  end

  def set_env(key, value)
    log "export #{key}=#{value}"
    ENV[key] = value.to_s
  end

  def initialize_logger
    @logger = Logger.new(STDOUT)
  end

  def fetch_latest_code
    if File.exist?(@options[:repo_dir])
      git_fetch_and_reset
    else
      git_clone
    end
  end

  def git_fetch_and_reset
    cd_repo_dir
    sh "rm -rf *"
    sh "git fetch"
    sh "git reset --hard origin/master"
  end

  def git_clone
    sh "git", "clone", @options[:git_url], @options[:repo_dir]
    cd_repo_dir
  end

  def cd_repo_dir
    log "cd #{@options[:repo_dir]}"
    Dir.chdir(@options[:repo_dir])
  end

  def inspect_codebase
    lines = `git show --pretty='format:%h\n%H\n%s' -s`.split("\n")
    @commit, @sha, @subject = lines
    log "Commit #{@commit}: #{@subject}"
  end

  def already_built?
    File.exist?(work_tag_filename)
  end

  def work_tag_filename
    "#{@options[:output_dir]}/by_commit/#{@commit}/built-#{@options[:work_tag]}.txt"
  end

  def recompile
    sh "~/.rvm/bin/rvm-exec ruby-1.8.7 rake native_support"
    sh "~/.rvm/bin/rvm-exec ruby-1.9.2 rake native_support"
    sh "~/.rvm/bin/rvm-exec ruby-1.9.3 rake native_support"
    sh "~/.rvm/bin/rvm-exec ruby-2.0.0 rake native_support"

    sh "~/.rvm/bin/rvm-exec ruby-2.0.0 rake nginx"

    APACHE_VERSIONS.each do |version|
      sh "rm -rf build/cache"
      sh "~/.rvm/bin/rvm-exec ruby-2.0.0 rake apache2 " +
        "APACHE2_OUTPUT_DIR=buildout/apache-#{version} " +
        "APXS2=/usr/local/apache-#{version}/bin/apxs " +
        "PATH=/usr/local/apache-#{version}/bin:#{ENV['PATH']}"
    end

    # The .o files were only used for linking agent executables.
    sh "rm -f buildout/agents/*.o"
    # The .o and .a files were only used for linking the Apache module.
    sh "rm -rf buildout/apache*/*.o buildout/apache*/*.a buildout/apache*/module*"
    # The directory is no longer necessary, only libboost_oxt.a matters.
    sh "rm -rf buildout/common/libboost_oxt"
    # libeio and libev were only used for linking agent executables.
    sh "rm -rf buildout/libeio buildout/libev"
    sh "rm", "-f", *Dir["buildout/ruby/*/{Makefile,mkmf.log,*.o}"]
  end

  def copy_over_binaries
    commit_dir = "#{@options[:output_dir]}/by_commit/#{@commit}"
    date_dir   = "#{@options[:output_dir]}/by_date/#{Date.today}"

    log "Archiving binaries to #{commit_dir}"
    mkdir_p commit_dir, :verbose => true

    Dir["buildout/ruby/*"].each do |subdir|
      name = File.basename(subdir)
      sh "tar", "-czf", "#{commit_dir}/rubyext-#{name}.tar.gz", ".", :chdir => "buildout/ruby/#{name}"
    end
    sh "tar", "-czf", "#{commit_dir}/support-#{binary_compat_id}.tar.gz",
      "agents", "common", :chdir => "buildout"

    APACHE_VERSIONS.each do |version|
      sh "tar", "-czf", "#{commit_dir}/apache-#{version}-#{binary_compat_id}.tar.gz",
        "mod_passenger.so", :chdir => "buildout/apache-#{version}"
    end

    log "Setting date symlink"
    mkdir_p "#{@options[:output_dir]}/by_date", :verbose => true
    rm_f date_dir, :verbose => true
    ln_s commit_dir, date_dir, :verbose => true

    sh "touch", work_tag_filename
  end

  def binary_compat_id
    @binary_compat_id ||= `./bin/passenger-config --cxx-compat-id`.strip
  end

  def sh(command, *args)
    log "#{command} #{args.join(' ')}"
    if !system(command, *args)
      abort "*** Command failed with code #{$? ? $?.exitstatus : 'unknown'}"
    end
  end

  def log(message)
    if STDOUT.tty?
      puts "\e[1m# #{message}\e[0m"
    else
      puts "# #{message}"
    end
  end
end

Autobuild.new.start
