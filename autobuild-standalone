#!/usr/bin/env ruby
# encoding: utf-8
abort "This tool requires Ruby 1.9" if RUBY_VERSION <= '1.9'

require 'optparse'
require 'logger'
require 'fileutils'
require 'date'

ROOT = File.expand_path(File.dirname(__FILE__))

class Autobuild
  APACHE_VERSIONS = ['2.0', '2.2', '2.4']

  include FileUtils

  def initialize
    @output_files = []
  end

  def start
    parse_options
    set_environment
    initialize_logger
    fetch_latest_code
    inspect_codebase
    fetch_nginx
    if already_built?
      log "Already built commit #{@commit}. Exiting."
    else
      recompile_passenger
      recompile_nginx
      begin
        build_tarballs
      rescue Exception
        remove_tarballs
        raise
      end
    end
  end

private
  def parse_options
    @options = {
      :repo_dir => File.expand_path("repo"),
      :output_dir => File.expand_path("output"),
      :work_tag => "today"
    }
    parser = OptionParser.new do |opts|
      nl = "\n#{' ' * 37}"
      opts.banner = "Usage: ./autobuild OPTIONS"
      opts.separator ""
      
      opts.separator "Options:"
      opts.on("--git-url URL", String, "The git URL") do |val|
        @options[:git_url] = val
      end
      opts.on("--repo-dir DIR", String, "The directory in which to store the repository") do |val|
        @options[:repo_dir] = File.expand_path(val)
      end
      opts.on("--output-dir DIR", String, "The directory in which to store binaries") do |val|
        @options[:output_dir] = File.expand_path(val)
      end
      opts.on("--work-tag NAME", String, "A tag to prevent duplicate builts") do |val|
        @options[:work_tag] = val
      end
      opts.on("--result-file FILE", String, "Save output filenames to this file") do |val|
        @options[:result_file] = val
      end
      opts.on("--help", "-h", "Show help message") do
        @options[:help] = true
      end
    end

    begin
      parser.parse!
    rescue OptionParser::ParseError => e
      STDERR.puts e
      STDERR.puts
      STDERR.puts "Please see './autobuild --help' for valid options."
      exit 1
    end

    if @options[:help]
      puts parser
      exit 0
    end
    if !@options[:git_url]
      abort "Please specify --git-url."
    end
  end

  def set_environment
    STDOUT.sync = STDERR.sync = true
    set_env('USE_CCACHE', 1)
    set_env('GZIP', '--best')
    set_env('VERBOSE', 1)
  end

  def set_env(key, value)
    log "export #{key}=#{value}"
    ENV[key] = value.to_s
  end

  def initialize_logger
    @logger = Logger.new(STDOUT)
  end

  def fetch_latest_code
    if File.exist?(passenger_code_dir)
      git_fetch_and_reset
    else
      git_clone
    end
  end

  def git_fetch_and_reset
    cd_repo_dir
    sh "rm -rf *"
    sh "git fetch"
    sh "git reset --hard origin/master"
  end

  def git_clone
    mkdir_p @options[:repo_dir], :verbose => true
    sh "git", "clone", @options[:git_url], passenger_code_dir
    cd_repo_dir
  end

  def cd_repo_dir
    log "cd #{passenger_code_dir}"
    Dir.chdir(passenger_code_dir)
  end

  def inspect_codebase
    lines = `git show --pretty='format:%h\n%H\n%s' -s`.split("\n")
    @commit, @sha, @subject = lines
    log "Commit #{@commit}: #{@subject}"
    File.read("lib/phusion_passenger.rb") =~ /PREFERRED_NGINX_VERSION *= *'(.+)'/
    @preferred_nginx_version = $1
  end

  def fetch_nginx
    log "Downloading Nginx #{@preferred_nginx_version}"
    if File.exist?(nginx_tarball)
      log "Tarball #{nginx_tarball} already exists. Skipping download."
    else
      sh "rm", "-f", nginx_tarball, nginx_tarball + ".asc"
      sh "wget", nginx_url, "-O", nginx_tarball
      sh "wget", nginx_url + ".asc", "-O", nginx_tarball + ".asc"
      begin
        sh "gpg", "--verify", nginx_tarball + ".asc"
      rescue SystemExit
        sh "rm", "-f", nginx_tarball, nginx_tarball + ".asc"
        raise "Cannot verify Nginx tarball signature"
      end
    end
  end

  def already_built?
    File.exist?(work_tag_filename)
  end

  def work_tag_filename
    "#{@options[:output_dir]}/by_commit/#{@commit}/built-#{@options[:work_tag]}.txt"
  end

  def recompile_passenger
    sh "~/.rvm/bin/rvm-exec ruby-1.8.7 rake native_support"
    sh "~/.rvm/bin/rvm-exec ruby-1.9.2 rake native_support"
    sh "~/.rvm/bin/rvm-exec ruby-1.9.3 rake native_support"
    sh "~/.rvm/bin/rvm-exec ruby-2.0.0 rake native_support"

    sh "~/.rvm/bin/rvm-exec ruby-2.0.0 rake nginx"

    APACHE_VERSIONS.each do |version|
      sh "rm -rf build/cache"
      sh "~/.rvm/bin/rvm-exec ruby-2.0.0 rake apache2 " +
        "APACHE2_OUTPUT_DIR=buildout/apache-#{version} " +
        "APXS2=/usr/local/apache-#{version}/bin/apxs " +
        "PATH=/usr/local/apache-#{version}/bin:#{ENV['PATH']}"
    end

    # The .o files were only used for linking agent executables.
    sh "rm -f buildout/agents/*.o"
    # The .o and .a files were only used for linking the Apache module.
    sh "rm -rf buildout/apache*/*.o buildout/apache*/*.a buildout/apache*/module*"
    # The directory is no longer necessary, only libboost_oxt.a matters.
    sh "rm -rf buildout/common/libboost_oxt"
    # libeio and libev were only used for linking agent executables.
    sh "rm -rf buildout/libeio buildout/libev"
    sh "rm", "-f", *Dir["buildout/ruby/*/{Makefile,mkmf.log,*.o}"]
  end

  def recompile_nginx
    env = {
      # Nginx's OpenSSL detection is broken w.r.t. static OpenSSL libraries.
      'CC' => ENV['CC'] + ' -lz -ldl'
    }
    Dir.chdir("buildout") do
      sh "tar", "xzvf", nginx_tarball
      Dir.chdir(nginx_basename) do
        sh env, "./configure " <<
          "--prefix=/tmp " <<
          "--with-cc-opt='-Wno-error' " <<
          "--with-http_ssl_module " <<
          "--with-http_spdy_module " <<
          "--with-http_gzip_static_module " <<
          "--with-http_stub_status_module " <<
          "--with-http_addition_module " <<
          "--add-module=#{passenger_code_dir}/ext/nginx"
        
        # We want to link statically to OpenSSL and PCRE.
        sh "sed -i 's|-lcrypto|/usr/local/override/lib/libcrypto.a|g' objs/Makefile"
        sh "sed -i 's|-lssl|/usr/local/override/lib/libssl.a|g' objs/Makefile"
        sh "sed -i 's|-lpcre|/usr/lib/libpcre.a|g' objs/Makefile"
        
        sh "make"
        sh "strip --strip-all objs/nginx"
      end
    end
  end

  def build_tarballs
    commit_dir = "#{@options[:output_dir]}/by_commit/#{@commit}"
    date_dir   = "#{@options[:output_dir]}/by_date/#{Date.today}"

    log "Archiving binaries to #{commit_dir}"
    make_output_subdir(commit_dir)

    Dir["buildout/ruby/*"].each do |subdir|
      name = File.basename(subdir)
      maketar "#{commit_dir}/rubyext-#{name}.tar.gz", ["."], "buildout/ruby/#{name}"
    end
    maketar "#{commit_dir}/support-#{binary_compat_id}.tar.gz",
      ["agents", "common"], "buildout"

    APACHE_VERSIONS.each do |version|
      maketar "#{commit_dir}/apache-#{version}-#{binary_compat_id}.tar.gz",
        ["mod_passenger.so"], "buildout/apache-#{version}"
    end

    maketar "#{commit_dir}/#{nginx_basename}-#{binary_compat_id}.tar.gz",
      ["nginx"], "buildout/#{nginx_basename}/objs"

    log "Setting date symlink"
    make_output_subdir("#{@options[:output_dir]}/by_date")
    rm_f date_dir, :verbose => true
    ln_s commit_dir, date_dir, :verbose => true

    sh "touch", work_tag_filename

    if @options[:result_file]
      log "Writing output filenames to #{@options[:result_file]}"
      File.open(@options[:result_file], "w") do |f|
        @output_files.each do |filename|
          f.puts filename
        end
      end
    end
  end

  def remove_tarballs
    log "An error occurred. Rolling back..."
    @output_files.each do |filename|
      sh "rm", "-f", filename
    end
    sh "rm", "-f", work_tag_filename
  end

  def binary_compat_id
    @binary_compat_id ||= `./bin/passenger-config --cxx-compat-id`.strip
  end

  def maketar(filename, input, chdir = nil)
    args = ["tar", "-czf", filename, *input]
    args << { :chdir => chdir } if chdir
    sh(*args)
    @output_files << filename
  end

  def nginx_url
    "http://nginx.org/download/#{nginx_basename}.tar.gz"
  end

  def nginx_tarball
    "#{@options[:repo_dir]}/#{nginx_basename}.tar.gz"
  end

  def nginx_basename
    "nginx-#{@preferred_nginx_version}"
  end

  def passenger_code_dir
    "#{@options[:repo_dir]}/main"
  end

  def make_output_subdir(dir)
    infer_nonexistant_subdirs(dir).each do |subdir|
      log "mkdir #{subdir}"
      Dir.mkdir(subdir, 0771)
      if !File.setgid?(subdir)
        sh "chmod", "g+s", subdir
      end
    end
  end

  def infer_nonexistant_subdirs(dirname)
    dirs = []
    while dirname != "/" && !File.exist?(dirname)
      dirs << dirname
      dirname = File.dirname(dirname)
    end
    dirs.reverse!
    dirs
  end

  def sh(command, *args)
    log "#{command} #{args.join(' ')}"
    if !system(command, *args)
      abort "*** Command failed with code #{$? ? $?.exitstatus : 'unknown'}"
    end
  end

  def log(message)
    if STDOUT.tty?
      puts "\e[1m# #{message}\e[0m"
    else
      puts "# #{message}"
    end
  end
end

Autobuild.new.start
